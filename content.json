{"meta":{"title":"sgclzqq","subtitle":"为你，千千万万遍！","description":"Unity踩坑人","author":"sgclzqq","url":"http://sgclzqq.com"},"pages":[{"title":"分类","date":"2014-12-22T04:39:04.000Z","updated":"2018-04-17T14:16:07.247Z","comments":false,"path":"categories/index.html","permalink":"http://sgclzqq.com/categories/index.html","excerpt":"","text":""},{"title":"关于","date":"2014-12-22T04:39:04.000Z","updated":"2018-04-17T14:37:30.254Z","comments":false,"path":"about/index.html","permalink":"http://sgclzqq.com/about/index.html","excerpt":"","text":""},{"title":"标签","date":"2014-12-22T04:39:04.000Z","updated":"2018-04-17T14:14:59.263Z","comments":false,"path":"tags/index.html","permalink":"http://sgclzqq.com/tags/index.html","excerpt":"","text":""},{"title":"友情链接","date":"2018-04-17T14:52:08.774Z","updated":"2018-04-17T14:52:08.774Z","comments":true,"path":"links/index.html","permalink":"http://sgclzqq.com/links/index.html","excerpt":"","text":"M-finder: http://www.m-finder.com/ AprilBlank: http://www.aprilblank.com/ 魔都大白: https://blog.csdn.net/qq_27948659/ 大槐树: https://www.yyblogs.net/ 小潘: https://ghostcto.coding.me/ Wait: https://93xiaosi.github.io/"}],"posts":[{"title":"test","slug":"test","date":"2018-04-17T13:40:13.000Z","updated":"2018-04-17T14:08:01.968Z","comments":true,"path":"2018/04/17/test/","link":"","permalink":"http://sgclzqq.com/2018/04/17/test/","excerpt":"","text":"ggsgsfdg","categories":[{"name":"测试","slug":"测试","permalink":"http://sgclzqq.com/categories/测试/"}],"tags":[{"name":"Unity","slug":"Unity","permalink":"http://sgclzqq.com/tags/Unity/"}]},{"title":"Unity组件本地映射","slug":"Unity组件本地映射","date":"2018-04-09T12:41:32.000Z","updated":"2018-04-17T15:51:29.227Z","comments":true,"path":"2018/04/09/Unity组件本地映射/","link":"","permalink":"http://sgclzqq.com/2018/04/09/Unity组件本地映射/","excerpt":"TextMesh组件本地映射 Light组件本地映射 通过JsonNet插件将Unity组件的属性值保存到本地的Json文件中，便于重新加载数据，恢复组件属性值，达到保存组件状态的目标。","text":"TextMesh组件本地映射 Light组件本地映射 通过JsonNet插件将Unity组件的属性值保存到本地的Json文件中，便于重新加载数据，恢复组件属性值，达到保存组件状态的目标。 TextMesh组件本地映射TextMesh本地映射 123456789101112131415161718192021public JToken GenerateJToken(Component component) &#123; TextMesh e = component as TextMesh; if (!e) return null; JObject jo = new JObject(); jo.Add(\"type\", typeof(TextMesh).FullName); jo.Add(\"text\", e.text); jo.Add(\"offsetZ\", e.offsetZ); jo.Add(\"characterSize\", e.characterSize); jo.Add(\"lineSpacing\", e.lineSpacing); jo.Add(\"anchor\", (int) e.anchor); jo.Add(\"alignment\", (int)e.alignment); jo.Add(\"tabSize\", e.tabSize); jo.Add(\"fontSize\", e.fontSize); jo.Add(\"fontStyle\", (int)e.fontStyle); jo.Add(\"richText\", e.richText); var color = e.color; var colorStr = string.Format(\"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;,&#123;3&#125;\", color.r, color.g, color.b, color.a); jo.Add(\"color\", colorStr); return jo; &#125; TextMesh加载恢复 123456789101112131415161718192021222324public void ApplyJToken(Component component, JToken jt) &#123; TextMesh e = component as TextMesh; if (!e) return; e.text = (string) jt[\"text\"]; e.offsetZ = (float) jt[\"offsetZ\"]; e.characterSize = (float) jt[\"characterSize\"]; e.lineSpacing = (float) jt[\"lineSpacing\"]; e.anchor=(TextAnchor)(int)jt[\"anchor\"]; e.alignment = (TextAlignment) (int) jt[\"alignment\"]; e.tabSize = (float) jt[\"tabSize\"]; e.fontSize = (int) jt[\"fontSize\"]; e.fontStyle = (FontStyle) (int) jt[\"fontStyle\"]; e.richText = (bool) jt[\"richText\"]; FrameCount.CountdownCallBack(1, () =&gt; &#123; e.font = Font.CreateDynamicFontFromOSFont(\"Arial\", 12); if (e.font != null) e.transform.GetComponent&lt;MeshRenderer&gt;().sharedMaterial = e.font.material; &#125;); var colorStr= (string)jt[\"color\"]; string[] str = colorStr.Split(','); Color color = new Color(float.Parse(str[0]), float.Parse(str[1]), float.Parse(str[2]), float.Parse(str[3])); e.color = color; &#125; Light组件本地映射Light本地映射 1234567891011121314151617181920212223242526272829public JToken GenerateJToken(Component component) &#123; Light e = component as Light; if (!e) return null; JObject jo = new JObject(); jo.Add(\"type\", typeof(Light).FullName); jo.Add(\"lightType\", (int) e.type); if (e.type == LightType.Point || e.type == LightType.Spot) &#123; jo.Add(\"range\", e.range); &#125; if (e.type == LightType.Spot) &#123; jo.Add(\"spotAngle\", e.spotAngle); &#125; var color = e.color; var colorStr = string.Format(\"&#123;0&#125;,&#123;1&#125;,&#123;2&#125;,&#123;3&#125;\", color.r, color.g, color.b, color.a); jo.Add(\"color\", colorStr); jo.Add(\"intensity\", (float) e.intensity); jo.Add(\"shadowType\", (int) e.shadows); jo.Add(\"strength\", e.shadowStrength); jo.Add(\"shadowResolution\", (int) e.shadowResolution); jo.Add(\"bias\", e.shadowBias); jo.Add(\"normalBias\", e.shadowNormalBias); jo.Add(\"nearPlane\", e.shadowNearPlane); jo.Add(\"renderMode\", (int)e.renderMode); jo.Add(\"mask\", (int) e.cullingMask); return jo; &#125; Light属性恢复 123456789101112131415161718192021222324252627public void ApplyJToken(Component component, JToken jt) &#123; Light e = component as Light; if (!e) return; e.type = (LightType)(int)jt[\"lightType\"]; if (e.type == LightType.Point || e.type == LightType.Spot) &#123; e.range = (float)jt[\"range\"]; &#125; if (e.type == LightType.Spot) &#123; e.spotAngle = (float) jt[\"spotAngle\"]; &#125; var colorStr = (string)jt[\"color\"]; string[] str = colorStr.Split(','); Color color = new Color(float.Parse(str[0]), float.Parse(str[1]), float.Parse(str[2]), float.Parse(str[3])); e.color = color; e.intensity = (float) jt[\"intensity\"]; e.shadows = (LightShadows) (int) jt[\"shadowType\"]; e.shadowStrength = (float) jt[\"strength\"]; e.shadowResolution = (LightShadowResolution)(int) jt[\"shadowResolution\"]; e.shadowBias = (float) jt[\"bias\"]; e.shadowNormalBias = (float) jt[\"normalBias\"]; e.shadowNearPlane = (float) jt[\"nearPlane\"]; e.renderMode = (LightRenderMode) (int) jt[\"renderMode\"]; e.cullingMask = (int) jt[\"mask\"]; &#125;","categories":[],"tags":[{"name":"unity笔记","slug":"unity笔记","permalink":"http://sgclzqq.com/tags/unity笔记/"}]},{"title":"unity笔记","slug":"unity笔记","date":"2018-03-14T05:57:17.000Z","updated":"2018-04-17T15:40:44.050Z","comments":true,"path":"2018/03/14/unity笔记/","link":"","permalink":"http://sgclzqq.com/2018/03/14/unity笔记/","excerpt":"","text":"代码中改变Light组件的ShadowType属性light.shadows=LightShadow.Hard; //LightShadow.Soft,LightShadow.None","categories":[{"name":"unity笔记","slug":"unity笔记","permalink":"http://sgclzqq.com/categories/unity笔记/"}],"tags":[{"name":"unity笔记","slug":"unity笔记","permalink":"http://sgclzqq.com/tags/unity笔记/"}]}]}